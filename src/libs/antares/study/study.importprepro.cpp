/*
** Copyright 2007-2018 RTE
** Authors: Antares_Simulator Team
**
** This file is part of Antares_Simulator.
**
** Antares_Simulator is free software: you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation, either version 3 of the License, or
** (at your option) any later version.
**
** There are special exceptions to the terms and conditions of the
** license as they are applied to this software. View the full text of
** the exceptions in file COPYING.txt in the directory of this software
** distribution
**
** Antares_Simulator is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with Antares_Simulator. If not, see <http://www.gnu.org/licenses/>.
**
** SPDX-License-Identifier: licenceRef-GPL3_WITH_RTE-Exceptions
*/

#include "study.h"
#include <assert.h>

using namespace Yuni;

#define SEP IO::Separator

namespace Antares
{
namespace Data
{
bool Study::importTimeseriesIntoInput()
{
    // Special case: some thermal clusters may force TS generation
    const bool importThermal
      = parameters.haveToImport(timeSeriesThermal) && runtime->thermalTSRefresh;
    // Something to import ?
    if ((parameters.timeSeriesToImport && parameters.timeSeriesToGenerate) || importThermal)
    {
        // Return status
        bool ret = true;

        // Let's see what data generated by the preprocessors we have to import
        logs.notice() << "Updating the input data...";
        logs.info() << "Importing the generated time-series into the input data";

        Solver::Progression::Task progression(*this, Solver::Progression::sectImportTS);

        // Load
        if (parameters.haveToImport(timeSeriesLoad))
        {
            logs.info() << "Importing load timeseries...";
            areas.each([&](const Data::Area& area) {
                logs.info() << "Importing load timeseries : " << area.name;
                buffer.clear() << folderInput << SEP << "load" << SEP << "series";
                ret = DataSeriesLoadSaveToFolder(area.load.series, area.id, buffer.c_str()) && ret;
                ++progression;
            });
        }

        // Solar
        if (parameters.haveToImport(timeSeriesSolar))
        {
            logs.info() << "Importing solar timeseries...";
            areas.each([&](const Data::Area& area) {
                logs.info() << "Importing solar timeseries : " << area.name;
                buffer.clear() << folderInput << SEP << "solar" << SEP << "series";
                ret
                  = DataSeriesSolarSaveToFolder(area.solar.series, area.id, buffer.c_str()) && ret;
                ++progression;
            });
        }

        // Hydro
        if (parameters.haveToImport(timeSeriesHydro))
        {
            logs.info() << "Importing hydro timeseries...";
            areas.each([&](const Data::Area& area) {
                logs.info() << "Importing hydro timeseries : " << area.name;
                buffer.clear() << folderInput << SEP << "hydro" << SEP << "series";
                ret = area.hydro.series->saveToFolder(area.id, buffer) && ret;
                ++progression;
            });
        }

        // Wind
        if (parameters.haveToImport(timeSeriesWind))
        {
            logs.info() << "Importing wind timeseries...";
            areas.each([&](const Data::Area& area) {
                logs.info() << "Importing wind timeseries : " << area.name;
                buffer.clear() << folderInput << SEP << "wind" << SEP << "series";
                ret = DataSeriesWindSaveToFolder(area.wind.series, area.id, buffer.c_str()) && ret;
                ++progression;
            });
        }

        // Thermal
        if (importThermal)
        {
            logs.info() << "Importing thermal timeseries...";
            String msg;

            areas.each([&](Data::Area& area) {
                msg.clear() << "Importing thermal timeseries : " << area.name;

                // Spinning
                if (parameters.mode != stdmAdequacyDraft)
                {
                    area.thermal.list.reverseCalculationOfSpinning();
                    area.thermal.mustrunList.reverseCalculationOfSpinning();
                }

                buffer.clear() << folderInput << SEP << "thermal" << SEP << "series";
                ret = area.thermal.list.saveDataSeriesToFolder(buffer.c_str(), msg) && ret;
                ++progression;
            });
        }

        return ret;
    }
    return true;
}

} // namespace Data
} // namespace Antares
