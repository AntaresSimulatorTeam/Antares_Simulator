THIS FILE CONTAINS DETAILED INSTRUCTIONS ON HOW TO BUILD BINARIES
----------------------------------------------------------------- 
IDENTICAL TO THOSE DISTRIBUTED IN RTE'S PACKAGES
------------------------------------------------


1. Environment
==============

Antares_Simulator is a cross-platform project using components compatible
with many 32 bits and 64 bits OS (Windows, Linux, Unix) 

The source distribution accompanying this file has been tested for successful build on:

Windows 7
Windows 10
Linux CentOS  6
RHEL 7.3 

with compilers MSVC 19.00 &  GCC 4.8.1

Note on End-Of-Line convention
------------------------------
If the origin of the source folder accompanying this file is a check-out 
from a Git repository, end-of-line should be in the style of the local OS

If the source folder was distributed along with the binary form of the code
within an Antares_Simulator installer package, the end-of-line style is that of
the OS the package is designed for

To build on Windows system, please change end-of-line style to appropriate standard 
Note that Visual Studio may carry out auto-reformating. 

1.1 OS-dependent resources
==========================

Windows : 	Visual Studio 2015 (or later) 
Linux	:	GCC >= 4.8.1 (required for C++11)  


1.2 Tools
=========

Git 						(source versioning)
Cmake (>=3.9.0)				(Generation of Visual studio solutions, Linux and Unix Makefiles)
Perl strawberry (>=5.26)    (Windows pre-compilation of OpenSSL) 
 

1.3 External Dependencies
========================= 

This section describes compiling procedures for the third-part Open source libraries used by ANTARES
Hereafter the environment variable ${ANTARES} points at the Antares' repository root folder.

To begin with , clone the whole Antares repository and checkout the branch bearing the tag 
of the relevant distributed version ( >=6.0.0) 

Four external dependencies are integrated as Git submodules: 

* src/ext/openssl 		- OpenSSL 		1.1.0
* src/ext/libcurl 		- Curl 			7.51.0
* src/ext/wxwidgets 	- wxWidgets 	3.0.2
* src/ext/Sirius_Solver	- Sirius_Solver 6.0.0
 
After a pull on Antares repository , submodules should be already properly initialized


1.3.1 Compiling OpenSSL with Visual Studio - 64 bits solution
=============================================================

Requirements :
* Visual Studio - 2015 Update 2
* Perl - Strawberry Perl

Warning : make sure that the perl version available is Strawberry perl and not one shipped along with Git.
If needed, remove temporarily "...\Git\usr\bin" from the environment variables (and put it back afterwards)

Notice: launching  nmake requires the execution of "vcvars64.bat" (as described below),
 which updates environment variables for the current session.

Open a command line console and run:


"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"
cd ${ANTARES}\src\ext\openssl
perl Configure VC-WIN64A --prefix=vc-release-x86_64 no-shared
ms\do_win64a
nmake -f ms\nt.mak
nmake -f ms\nt.mak install


1.3.2 Compiling OpenSSL with Visual Studio - 32 bits solution
=============================================================

Requirements :
* Visual Studio - 2015 Update 2
* Perl - Strawberry Perl

Warning : make sure that the perl version available is Strawberry perl and not one shipped along with Git.
If needed, remove temporarily "...\Git\usr\bin" from the environment variables (and put it back afterwards)

Notice: launching  nmake requires the execution of "vcvars64.bat" (as descibed below), 
which updates environment variables for the current session.

Open a command line console and run:

"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat"
cd ${ANTARES}\src\ext\openssl
perl Configure VC-WIN32 no-asm --prefix=vc-release-x86 no-shared
ms\do_ms
nmake -f ms\nt.mak
nmake -f ms\nt.mak install



1.3.3 Compiling OpenSSL for Linux
=================================

* Set the compiler to use if the default one is not compatible with C++11
* For instance, to use gcc-4.8, use :


export CC=/usr/local/gcc/4.8/bin/gcc-4.8
export CXX=/usr/local/gcc/4.8/bin/g++-4.8

cd ${ANTARES}
cd src/ext
cd openssl
./config --prefix=$PWD/release-x86_64 no-asm no-mdc2 no-rc5 no-shared
make depend
make 
make install

1.4.1 Compiling Curl for Windows 64 bits
========================================

Open a command line console and run:

"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat"
cd ${ANTARES}\src\ext\libcurl\winbuild
nmake /f Makefile.vc mode=static VC=14 WITH_SSL=static WITH_DEVEL=../../openssl/vc-release-x86_64 ENABLE_SSPI=no ENABLE_IDN=no ENABLE_WINSSL=no GEN_PDB=no DEBUG=no MACHINE=x64


1.4.2 Compiling Curl for Windows 32 bits
========================================

Open a command line console and run:

"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\vcvars32.bat"
cd ${ANTARES}\src\ext\libcurl\winbuild
nmake /f Makefile.vc mode=static VC=14 WITH_SSL=static WITH_DEVEL=../../openssl/vc-release-x86 ENABLE_SSPI=no ENABLE_IDN=no ENABLE_WINSSL=no GEN_PDB=no DEBUG=no MACHINE=x86
</pre>

1.4.3 Compiling Curl for Linux
==============================

* Set the compiler to use if the default one is not compatible with C++11
* For instance, to use gcc-4.8, use :


export CC=/usr/local/gcc/4.8/bin/gcc-4.8
export CXX=/usr/local/gcc/4.8/bin/g++-4.8

cd ${ANTARES}/src
ANTARES_SRC=`pwd`
cd ext/libcurl
./buildconf
LIBS="-ldl -lpthread" ./configure --disable-shared --with-ssl="$ANTARES_SRC/ext/openssl/release-x86_64"
make


1.5.1 Compiling WxWidget for Windows 32 or 64 bits 
==================================================

Copy file  "setup0.h" from ${ANTARES}\src\ext\wxwidgets\include\wx\msw\
to:    ${ANTARES}\src\ext\wxwidgets\include\wx\msw\setup.h.

In the file ${ANTARES}\src\ext\wxwidgets\src\tiff\libtiff\tif_config.h 
Replace in line 367:   #define snprintf _snprintf
by : 

#if (defined(_MSC_VER) && (_MSC_VER < 1900))
  #define snprintf _snprintf
#endif

Locate the folder : ${ANTARES}\src\ext\wxwidgets\build\msw
open "wx_vc12.sln" (double-click to launch  Visual Studio)

* If needed,update compilation tools as suggested when opening Visual Studio
	Explanation: in Visual Studio C++, the WxWidget solution is a VS 12.0 one. 
	With VS 2015 (version14.0), compilation tools must be upgraded. This is automatically suggested by VS 2015 
* Configure compilation parameters (Debug/Release/x64/Win32)

* Compile

1.5.2 Compiling WxWidget for Linux 
==================================


* Set the compiler to use if the default one is not compatible with C++11
* For instance, to use gcc-4.8, use :


export CC=/usr/local/gcc/4.8/bin/gcc-4.8
export CXX=/usr/local/gcc/4.8/bin/g++-4.8

* run the compiler :

cd ${ANTARES}/src
#wxWidgets
cd ext/wxwidgets
mkdir build_gtk
cd build_gtk
../configure --with-gtk --disable-shared
make


2. Building Antares Solution for Windows
========================================


2.1 Preliminary step : get a clean environment
----------------------------------------------

If required, do not hesitate to clean up your local repository either:

* before cloning the sources
* between successive 64 bits and 32 bits compilation 

Cleaning the Git repository can be achieved by runing the following command, which resets the local
repository to zero (no cached or temporary files remaining):

git clean -xdf # 

If the version tag (X.Y.z) needs to be updated, this should be made in the file :

 @src/CMakeLists.txt@ :


# Version
set(ANTARES_VERSION_HI	      5) # numero majeur X
set(ANTARES_VERSION_LO	      0) # numero mineur Y
set(ANTARES_VERSION_REVISION  0) # numero de révision z


2.2 Compiling for Windows : generation of Visual Studio solution
----------------------------------------------------------------

Note : generation should not be attempted before setting up the version tag defined in CMakeLists.txt

cd ${ANTARES}/src
 
2.2.1 32 bits version
---------------------

cmake -G "Visual Studio 10" -DCMAKE_BUILD_TYPE=release .

or

cmake -G "Visual Studio 14 2015" -DCMAKE_BUILD_TYPE=release .


2.2.2 64 bits version
---------------------

cmake -G "Visual Studio 10 Win64" -DCMAKE_BUILD_TYPE=release .


or

cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_BUILD_TYPE=release .

2.3 Compiling for Windows : Running the compiler
------------------------------------------------


# Open the solution @src/antares.sln@ with Visual Studio 10 or Visual Studio 15
# Choose the target "Release"
# Generate the solution 

3. Building Antares for Linux
=============================

3.1 Preliminary step : get a clean environment
----------------------------------------------

Do not hesitate to clean up your local repository before cloning the sources 

Cleaning the Git repository can be achieved by runing the following command, which resets the local
repository to zero (no cached or temporary files remaining):

git clean -xdf # 

If the version tag (X.Y.z) needs to be updated, this should be made in the file :

 @src/CMakeLists.txt@ :


# Version
set(ANTARES_VERSION_HI	      5) # major index 		X
set(ANTARES_VERSION_LO	      0) # minor index 		Y
set(ANTARES_VERSION_REVISION  0) # revision number 	z

3.2 Compiling for Linux
-----------------------

3.2.1 Set the path
------------------

$ cd ${ANTARES}

* Set the compiler to use if the default one is not compatible with C++11
* For instance, to use gcc-4.8, use :

export CC=/usr/local/gcc/4.8/bin/gcc-4.8
export CXX=/usr/local/gcc/4.8/bin/g++-4.8

3.2.2 Generate the makefiles
----------------------------

In debug mode:
$ cmake .

Or in release mode:
$ cmake . -DCMAKE_BUILD_TYPE=release

3.2.3 Compile Antares
---------------------

$ make

Tips : If you have more than one processor/core, you can run more than one job :
  $ make -j X
  where X is the number of jobs to run simultaneously.

Tips : `make VERBOSE=1` to see the real commands