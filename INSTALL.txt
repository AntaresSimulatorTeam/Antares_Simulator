THIS FILE CONTAINS DETAILED INSTRUCTIONS ON HOW TO BUILD BINARIES
----------------------------------------------------------------- 
IDENTICAL TO THOSE DISTRIBUTED IN RTE'S PACKAGES
------------------------------------------------


1. Environment
==============

Antares_Simulator is a cross-platform project using components compatible
with many 32 bits and 64 bits OS (Windows, Linux, Unix) 

The source distribution accompanying this file has been tested for successful build on:

Windows 7
Windows 10
Linux CentOS  6
RHEL 7.3
Ubuntu 18.04

with compilers MSVC 19.00 &  GCC 4.8.1 & GCC 7

Note on End-Of-Line convention
------------------------------
If the origin of the source folder accompanying this file is a check-out 
from a Git repository, end-of-line should be in the style of the local OS

If the source folder was distributed along with the binary form of the code
within an Antares_Simulator installer package, the end-of-line style is that of
the OS the package is designed for

To build on Windows system, please change end-of-line style to appropriate standard 
Note that Visual Studio may carry out auto-reformating. 

1.1 OS-dependent resources
==========================

Windows : 	Visual Studio 2015 (or later) 
Linux	:	GCC >= 4.8.1 (required for C++11)  


1.2 Tools
=========

Git 						(source versioning)
Cmake (>=3.9.0)				(Generation of Visual studio solutions, Linux and Unix Makefiles)
 

1.3 External Dependencies
========================= 

This section describes install procedures for the third-part Open source libraries used by ANTARES

For Windows we will use vcpkg to download and compile the librairies : https://github.com/microsoft/vcpkg

1.3.1 Install vcpkg 
===================
vcpkg can be installed anywhere on your computer.

> git clone https://github.com/Microsoft/vcpkg.git
> cd vcpkg

PS> .\bootstrap-vcpkg.bat

Note : all vcpkg command further described must be launch from vcpkg folder. This folder will be named [vcpkg_root] later in this document.

1.3.2 Install OpenSSL for  windows
==================================
cd [vcpkg_root]
vcpkg install openssl

1.3.3 Install OpenSSL for Linux
=================================
Ubuntu : sudo apt-get install openssl
RHEL / Centos : sudo yum install openssl

1.4.1 Install Curl for Windows
==============================
cd [vcpkg_root]
vcpkg install curl

1.4.2 Install Curl for Linux
==============================
Ubuntu : sudo apt-get install curl
RHEL / Centos : sudo yum install curl


1.5.1 Install WxWidget for Windows
==================================
cd [vcpkg_root]
vcpkg install wxwidgets

1.5.2 Compiling WxWidget for Linux 
==================================
Ubuntu : sudo apt-get install wxwidgets
RHEL / Centos : sudo yum install wxwidgets


2. Building Antares Solution for Windows
========================================


2.1 Preliminary step : get a clean environment
----------------------------------------------

If required, do not hesitate to clean up your local repository either:

* After a checkout (changing of branch, commit or tag) and before a new compilation
* between successive 64 bits and 32 bits compilation 

Cleaning the Git repository can be achieved by running the following command, which resets the local
repository to zero (no cached or temporary files remaining):

git clean -xdf

If the version tag (X.Y.z) needs to be updated, this should be made in the file :

 @src/CMakeLists.txt@ :


# Version
set(ANTARES_VERSION_HI	      5) # numero majeur X
set(ANTARES_VERSION_LO	      0) # numero mineur Y
set(ANTARES_VERSION_REVISION  0) # numero de révision z


2.2 Compiling for Windows : generation of Visual Studio solution
----------------------------------------------------------------

Note : generation should not be attempted before setting up the version tag defined in CMakeLists.txt

cd ${ANTARES}/src
 
2.2.1 32 bits version
---------------------

cmake -G "Visual Studio 10" -DCMAKE_BUILD_TYPE=release -DCMAKE_TOOLCHAIN_FILE=[vcpkg_root]/scripts/buildsystems/vcpkg.cmake .

or

cmake -G "Visual Studio 14 2015" -DCMAKE_BUILD_TYPE=release -DCMAKE_TOOLCHAIN_FILE=[vcpkg_root]/scripts/buildsystems/vcpkg.cmake .


2.2.2 64 bits version
---------------------

cmake -G "Visual Studio 10 Win64" -DCMAKE_BUILD_TYPE=release -DCMAKE_TOOLCHAIN_FILE=[vcpkg_root]/scripts/buildsystems/vcpkg.cmake .


or

cmake -G "Visual Studio 14 2015 Win64" -DCMAKE_BUILD_TYPE=release -DCMAKE_TOOLCHAIN_FILE=[vcpkg_root]/scripts/buildsystems/vcpkg.cmake .

or

cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=release -DCMAKE_TOOLCHAIN_FILE=[vcpkg_root]/scripts/buildsystems/vcpkg.cmake .

2.3 Compiling for Windows : Running the compiler
------------------------------------------------

# Open the solution @src/antares.sln@ with Visual Studio 10 or Visual Studio 15
# Choose the target "Release"
# Generate the solution 

# Or compile from command line
cmake --build . --condif Release

3. Building Antares for Linux
=============================

3.1 Preliminary step : get a clean environment
----------------------------------------------

Do not hesitate to clean up your local repository before a checkout

Cleaning the Git repository can be achieved by runing the following command, which resets the local
repository to zero (no cached or temporary files remaining):

git clean -xdf

If the version tag (X.Y.z) needs to be updated, this should be made in the file :

 @src/CMakeLists.txt@ :


# Version
set(ANTARES_VERSION_HI	      5) # major index 		X
set(ANTARES_VERSION_LO	      0) # minor index 		Y
set(ANTARES_VERSION_REVISION  0) # revision number 	z

3.2 Compiling for Linux
-----------------------

3.2.1 Set the path
------------------

$ cd ${ANTARES}

* Set the compiler to use if the default one is not compatible with C++11
* For instance, to use gcc-4.8, use :

export CC=/usr/local/gcc/4.8/bin/gcc-4.8
export CXX=/usr/local/gcc/4.8/bin/g++-4.8

3.2.2 Generate the makefiles
----------------------------

In debug mode:
$ cmake .

Or in release mode:
$ cmake . -DCMAKE_BUILD_TYPE=release

3.2.3 Compile Antares
---------------------

$ make

Tips : If you have more than one processor/core, you can run more than one job :
  $ make -j X
  where X is the number of jobs to run simultaneously.

Tips : `make VERBOSE=1` to see the real commands