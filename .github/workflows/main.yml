name: CI

on:
  push:
    branches:
      - 'develop'
jobs:

  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest,ubuntu-latest]
        buildtype: [release]
        build_deps : [ON,OFF]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: 'ee17a685087a6886e5681e355d36cd784f0dd2c8'
            vcpkgPackages: openssl curl wxwidgets boost-test

    steps:
    - uses: actions/checkout@v2 

    - name : Install deps with VCPKG
      if: matrix.build_deps == 'OFF' && matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@master
      id: runvcpkg
      with:
        vcpkgArguments: '${{ matrix.vcpkgPackages }}'
        vcpkgTriplet: '${{ matrix.triplet }}'
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'

    - name: Install mandatory system libraries
      if: matrix.os == 'ubuntu-latest'
      run: |
           sudo apt-get update --fix-missing
           sudo apt-get install libuuid1 uuid-dev libssh2-1 libssh2-1-dev libidn2-0 libidn2-dev libidn11 libidn11-dev gtk2.0 libb64-dev           

    - name: Install additionnal libraries
      if: matrix.build_deps == 'OFF' && matrix.os == 'ubuntu-latest'
      run: |
           sudo apt-get install libwxgtk3.0-dev libcurl4-openssl-dev libboost-test-dev
        
    - name: Configure with VCPKG
      if: matrix.build_deps == 'OFF' && matrix.os == 'windows-latest'
      run: |
           cmake -B _build -S src -DCMAKE_TOOLCHAIN_FILE=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_BUILD_TYPE=release -DBUILD_TESTING=ON
    
    - name: Configure
      if: matrix.build_deps == 'ON' || matrix.os != 'windows-latest'
      run: |
           cmake -B _build -S src -DBUILD_DEPS=${{ matrix.build_deps }} -DCMAKE_BUILD_TYPE=release -DBUILD_TESTING=ON
    
    - name: Build
      run: |
           cmake --build _build --config release -j2

    - name: Running unit tests
      run: |
           cd _build
           ctest -C ${{ matrix.buildtype }} --output-on-failure
           
    - name: NSIS Installer creation
      if: matrix.os == 'windows-latest'
      run: |
           cd _build
           cpack -GNSIS

    - name: NSIS Installer upload
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: antares-installer-64bits
        path: _build/rte-antares-*.*.*-installer-*.exe
        
    - name: Installer .deb creation
      if: matrix.os == 'ubuntu-latest'
      run: |
           cd _build
           cpack -G DEB

    - name: Installer .tar.gz creation
      if: matrix.os == 'ubuntu-latest'
      run: |
           cd _build
           cpack -G TGZ

    - name: Installer upload
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: antares-installer-64bits
        path: _build/antares-*.*.*-Linux.*
