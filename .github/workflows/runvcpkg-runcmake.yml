
name: Windows CI (runvcpkg + runcmake)

on:
  push:
    branches:
      - develop
      - feature/*
      - features/*
      - fix/*
      - issue-*
      - release/*
      - doc/*
      - runvcpkg-runcmake-presets
  schedule:
    - cron: '21 2 * * *'

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux

    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      ORTOOLS_URL: "https://github.com/rte-france/or-tools/releases/download/v9.5-rte2.0/ortools_cxx_windows-latest_static_sirius.zip"
      RUN_EXTENDED_TESTS: ${{ github.event_name == 'schedule'}}

      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
      VCPKG_CACHE_DIR: ${{ github.workspace }}/vcpkg_cache
      # - if: matrix.os == 'ubuntu-latest':
      #       PRESET: 'ninja-multi-vcpkg'
      # - if: matrix.os == 'windows-latest':
      #       PRESET: 'msbuild-vcpkg'

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Pre-requisites
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
            choco install wget unzip zip --no-progress

      - uses: lukka/get-cmake@latest
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: vcpkg initialization
        shell: bash  
        run: |
             mkdir -p vcpkg_installed
             mkdir -p vcpkg_cache

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          # This one is not needed, as it is the default value anyway.
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: '**/vcpkg.json'
          # let run-cmake do it
          # runVcpkgInstall: true
          doNotCache: false
          binaryCachePath: '${{ github.workspace }}/vcpkg_cache'
     
      - name: Read antares-deps version
        id: antares-deps-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'antares-deps-version.json'
          prop_path: 'antares_deps_version'

      - name: setpreset ub
        shell: bash 
        run: |
          echo "configurePreset=ninja-multi-vcpkg" >> $GITHUB_ENV
          echo "configubuildPreset=ninja-multi-vcpkg" >> $GITHUB_ENV
          echo "archive_type=tgz" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'

      - name: setpreset Win
        shell: bash 
        run: |
          echo "configurePreset=msbuild-vcpkg" >> $GITHUB_ENV
          echo "configubuildPreset=msbuild-vcpkg" >> $GITHUB_ENV
          echo "archive_type=zip" >> $GITHUB_ENV
        if: matrix.os == 'windows-latest'
        
      - name: Download pre-compiled librairies (win)
        if: matrix.os == 'windows-latest'
        uses: ./.github/workflows/download-extract-precompiled-libraries-zip
        with:
          antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
          os: ${{matrix.os}}
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}
          
      - name: Download pre-compiled librairies
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
          #os: ${{matrix.os}}
          os: ubuntu-20.04
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}
          
      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        id: setup-python
        with:
          architecture: 'x64'
          python-version: '3.12'

      - name: Install pip dependencies if necessary
        run: pip install -r src/tests/examples/requirements.txt

      - name: Init submodule
        run: |
          git submodule update --init src/antares-deps
          git submodule update --init --remote src/tests/resources/Antares_Simulator_Tests

      - name: Enable git longpaths
        run:  git config --system core.longpaths true

        
      - name: List $RUNNER_WORKSPACE before build
        run: find $RUNNER_WORKSPACE
        shell: bash
      
      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "
      

      - name: Run CMake-Config-Build (Release configuration)
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/src/CMakeLists.txt'
          # configurePresetAdditionalArgs: "['-DPython3_EXECUTABLE=${{ steps.setup-python.outputs.python-path }}']"
          configurePreset: ${{ env.configurePreset }}
          buildPreset: ${{ env.buildPreset }}
          buildPresetAdditionalArgs: '[`--config Release`]'
      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Run unfeasibility-related tests
        run: |
            cd _build
            ctest -C Release --output-on-failure -R unfeasible

      - name: Run unit and end-to-end tests
        run: |
            cd _build
            ctest -C ${{ matrix.buildtype }} --output-on-failure -L "unit|end-to-end" -LE ortools

      - name: Run kirchhoff-constraint-tests
        if: ${{ false }}
        shell: bash
        run: |
            tar xvf src/tests/kirchhoff-cbuilder/reference.tar.gz -C src/tests/kirchhoff-cbuilder/
            cd _build
            ctest -C Release --output-on-failure -R kirchhoff

      - name: Upload build on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: MPS-diff
          path: ${{ github.workspace }}/src/tests/mps

      # simtest
      - name: Read simtest version
        id: simtest-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'simtest.json'
          prop_path: 'version'

      - name: Run named mps tests
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: valid-named-mps
          os: ${{ matrix.test-platform }}
          variant: "named-mps"

      - name: Run tests for adequacy patch (CSR)
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: adequacy-patch-CSR
          os: ${{ matrix.test-platform }}

      - name: Run tests about infinity on BCs RHS
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: valid-v830
          os: ${{ matrix.test-platform }}

      - name: Run tests introduced in v860
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: valid-v860
          os: ${{ matrix.test-platform }}

      - name: Run short-tests
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: short-tests
          os: ${{ matrix.test-platform }}

      - name: Run mps tests
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: valid-mps
          os: ${{ matrix.test-platform }}

      - name: Run medium-tests
        if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: medium-tests
          os: ${{ matrix.test-platform }}

      - name: Run long-tests-1
        if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: long-tests-1
          os: ${{ matrix.test-platform }}

      - name: Run long-tests-2
        if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: long-tests-2
          os: ${{ matrix.test-platform }}

      - name: Run long-tests-3
        if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{steps.simtest-version.outputs.prop}}
          batch-name: long-tests-3
          os: ${{ matrix.test-platform }}

      - name: Solver archive creation
        shell: bash
        run: |
            cd _build
            zip -r antares-solver_windows.zip solver/Release/antares-*-solver.exe solver/Release/*.dll

      - name: NSIS Installer creation
        shell: bash
        run: |
            rm -rf src/tests/resources/Antares_Simulator_Tests
            cd _build
            cpack -GNSIS
            export NSIS_NAME=$(ls *.exe)
            echo "NSIS_NAME=$NSIS_NAME" >> $GITHUB_ENV

      - name: Upload NSIS log on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: NSISError.log
          path: _build/_CPack_Packages/win64/NSIS/NSISOutput.log

      - name: .zip creation
        run: |
            cd _build
            cpack -G ZIP

      - name: Installer upload
        uses: actions/upload-artifact@v3
        with:
          path: _build/${{env.NSIS_NAME}}

      - name: Archive upload
        uses: actions/upload-artifact@v3
        with:
          path: _build/*.zip
