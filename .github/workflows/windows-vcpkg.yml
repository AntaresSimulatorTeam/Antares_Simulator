name: Windows CI (VCPKG and pre-compiled)

on:
  push:
    branches:
      - develop
      - feature/*
      - features/*
      - fix/*
      - issue-*
      - release/*
      - doc/*
      - !feature/reshape-constraint-construction
  schedule:
    - cron: '21 2 * * *'

jobs:
  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        buildtype: [release]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgPackages: wxwidgets boost-test
            test-platform: windows-2022
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      ORTOOLS_URL: "https://github.com/rte-france/or-tools/releases/download/v9.5-rte2.0/ortools_cxx_windows-latest_static_sirius.zip"
      RUN_EXTENDED_TESTS: ${{ github.event_name == 'schedule'}}

    steps:
    - uses: actions/checkout@v3

    - name: Pre-requisites
      shell: cmd
      run: |
          choco install wget unzip zip --no-progress

    - name : Init VCPKG submodule
      run: |
          git submodule update --init vcpkg

    # Restore both vcpkg and its artifacts from the GitHub cache service.
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v3
      with:
        # The first path is the location of vcpkg (it contains the vcpkg executable and data files).
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
        # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
        # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
        key: |
          ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}

    - name : Install deps with VCPKG
      run: |
          cd vcpkg
          ./bootstrap-vcpkg.sh
          vcpkg install ${{matrix.vcpkgPackages}} --triplet ${{matrix.triplet}}
          rm -rf buildtrees packages downloads
      shell: bash

    - name: Read antares-deps version
      id: antares-deps-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'antares-deps-version.json'
        prop_path: 'antares_deps_version'

    - name: Download pre-compiled librairies
      uses: ./.github/workflows/download-extract-precompiled-libraries-zip
      with:
        antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
        os: ${{matrix.os}}
        ortools-url: ${{env.ORTOOLS_URL}}
        ortools-dir: ${{env.ORTOOLS_DIR}}

    - name: Setup Python 3.12
      uses: actions/setup-python@v4
      id: setup-python
      with:
        architecture: 'x64'
        python-version: '3.12'

    - name: Install pip dependencies if necessary
      run: pip install -r src/tests/examples/requirements.txt

    - name: Init submodule
      run: |
        git submodule update --init src/antares-deps
        git submodule update --init --remote src/tests/resources/Antares_Simulator_Tests

    - name: Enable git longpaths
      run:  git config --system core.longpaths true

    - name: Configure
      shell: bash
      run: |
           cmake -B _build -S src \
           -DDEPS_INSTALL_DIR=rte-antares-deps-Release \
           -DCMAKE_PREFIX_PATH="${{ env.ORTOOLS_DIR }}/install" \
           -DVCPKG_ROOT="${{env.VCPKG_ROOT}}" \
           -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
           -DCMAKE_BUILD_TYPE=release \
           -DBUILD_TESTING=ON  \
           -DBUILD_TOOLS=ON \
           -DBUILD_not_system=OFF \
           -DPython3_EXECUTABLE='${{ steps.setup-python.outputs.python-path }}'

    - name: Build
      shell: bash
      run: |
           cmake --build _build --config release -j2

    - name: Run unfeasibility-related tests
      run: |
           cd _build
           ctest -C Release --output-on-failure -R "^unfeasible$"

    - name: Run unit and end-to-end tests
      run: |
           cd _build
           ctest -C ${{ matrix.buildtype }} --output-on-failure -L "unit|end-to-end" -LE ortools

    - name: Run kirchhoff-constraint-tests
      if: ${{ false }}
      shell: bash
      run: |
           tar xvf src/tests/kirchhoff-cbuilder/reference.tar.gz -C src/tests/kirchhoff-cbuilder/
           cd _build
           ctest -C Release --output-on-failure -R kirchhoff

    - name: Upload build on failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: MPS-diff
        path: ${{ github.workspace }}/src/tests/mps

    # simtest
    - name: Read simtest version
      id: simtest-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'simtest.json'
        prop_path: 'version'

    - name: Run named mps tests
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-named-mps
        os: ${{ matrix.test-platform }}
        variant: "named-mps"

    - name: Run tests for adequacy patch (CSR)
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: adequacy-patch-CSR
        os: ${{ matrix.test-platform }}

    - name: Run tests about infinity on BCs RHS
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v830
        os: ${{ matrix.test-platform }}

    - name: Run tests introduced in v860
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v860
        os: ${{ matrix.test-platform }}

    - name: Run short-tests
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: short-tests
        os: ${{ matrix.test-platform }}

    - name: Run mps tests
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-mps
        os: ${{ matrix.test-platform }}

    - name: Run medium-tests
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: medium-tests
        os: ${{ matrix.test-platform }}

    - name: Run long-tests-1
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-1
        os: ${{ matrix.test-platform }}

    - name: Run long-tests-2
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-2
        os: ${{ matrix.test-platform }}

    - name: Run long-tests-3
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-3
        os: ${{ matrix.test-platform }}

    - name: Solver archive creation
      shell: bash
      run: |
           cd _build
           zip -r antares-solver_windows.zip solver/Release/antares-*-solver.exe solver/Release/*.dll

    - name: NSIS Installer creation
      shell: bash
      run: |
           rm -rf src/tests/resources/Antares_Simulator_Tests
           cd _build
           cpack -GNSIS
           export NSIS_NAME=$(ls *.exe)
           echo "NSIS_NAME=$NSIS_NAME" >> $GITHUB_ENV

    - name: Upload NSIS log on failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: NSISError.log
        path: _build/_CPack_Packages/win64/NSIS/NSISOutput.log

    - name: .zip creation
      run: |
           cd _build
           cpack -G ZIP

    - name: Installer upload
      uses: actions/upload-artifact@v3
      with:
        path: _build/${{env.NSIS_NAME}}

    - name: Archive upload
      uses: actions/upload-artifact@v3
      with:
        path: _build/*.zip
