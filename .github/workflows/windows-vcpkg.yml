name: Windows CI (VCPKG and pre-compiled)

on:
  push:
    branches:
      - develop
      - feature/*
      - features/*
      - fix/*
      - release/*
jobs:
  doc_generation:
    uses: ./.github/workflows/build-userguide.yml
    with:
      artifact_name: pdf-doc

  windows:

    runs-on: ${{ matrix.os }}
    needs: doc_generation
    strategy:
      matrix:
        os: [windows-latest]
        buildtype: [release]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgPackages: wxwidgets boost-test
            test-platform: windows-2022
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Pre-requisites
      shell: cmd
      run: |
          choco install wget unzip --no-progress

    - name : Init VCPKG submodule
      run: |
          git submodule update --init vcpkg

    - name: Download userguide
      uses: actions/download-artifact@v2
      with:
        name: pdf-doc
        path: docs/ref_guides

    # Restore both vcpkg and its artifacts from the GitHub cache service.
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      with:
        # The first path is the location of vcpkg (it contains the vcpkg executable and data files).
        # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
        path: |
          ${{ env.VCPKG_ROOT }}
          !${{ env.VCPKG_ROOT }}/buildtrees
          !${{ env.VCPKG_ROOT }}/packages
          !${{ env.VCPKG_ROOT }}/downloads
        # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
        # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
        # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
        key: |
          ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.triplet }}-invalidate

    - name : Install deps with VCPKG
      run: |
          cd vcpkg
          ./bootstrap-vcpkg.sh
          vcpkg install ${{matrix.vcpkgPackages}} --triplet ${{matrix.triplet}}
          rm -rf buildtrees packages downloads
      shell: bash

    - name: Read antares-deps version
      id: antares-deps-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'antares-deps-version.json'
        prop_path: 'antares_deps_version'

    - name: Download pre-compiled librairies
      uses: ./.github/workflows/download-extract-precompiled-libraries-zip
      with:
        antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
        os: ${{matrix.os}}
        ortools-tag: v9.2-rte1.2 # TODO : from .json
        ortools-os: windows-2019

    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip3 install -r src/tests/examples/requirements.txt

    - name: Init submodule
      run: |
           git submodule update --init --recursive src

    - name: Configure
      shell: bash
      run: |
           cmake -B _build -S src -DDEPS_INSTALL_DIR=rte-antares-deps-Release -DCMAKE_PREFIX_PATH=../install -DVCPKG_ROOT="${{env.VCPKG_ROOT}}" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_BUILD_TYPE=release -DBUILD_TESTING=ON  -DBUILD_OUTPUT_TEST=ON -DBUILD_not_system=OFF

    - name: Build
      shell: bash
      run: |
           cmake --build _build --config release -j2

    - name: Run unfeasibility-related tests
      run: |
           cd _build
           ctest -C Release --output-on-failure -R unfeasible

    # simtest
    - name: Read simtest version
      id: simtest-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'simtest.json'
        prop_path: 'version'

    - name: Run short-tests
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: short-tests
        os: ${{ matrix.test-platform }}

    - name: NSIS Installer creation
      shell: bash
      run: |
           rm -rf src/tests/resources/Antares_Simulator_Tests
           rm -rf src/tests/resources/NonRegTests
           cd _build
           cpack -GNSIS
           export NSIS_NAME=$(ls *.exe)
           echo "NSIS_NAME=$NSIS_NAME" >> $GITHUB_ENV

    - name: .zip creation
      run: |
           cd _build
           cpack -G ZIP

    - name: Installer upload
      uses: actions/upload-artifact@v2
      with:
        name: antares-installer-64bits
        path: _build/${{env.NSIS_NAME}}

    - name: Archive upload
      uses: actions/upload-artifact@v2
      with:
        name: antares-windows-archive
        path: _build/*.zip
