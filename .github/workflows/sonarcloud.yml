name: SonarCloud

on:
  pull_request:
  push:
    branches:
      - develop

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]

    env:
      SONAR_SERVER_URL: "https://sonarcloud.io"
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      # Caching strategy of VCPKG dependencies
      VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg_cache,readwrite"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install VCPKG
        run: git submodule update --init vcpkg && ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Restore vcpkg binary dir from cache
        id: cache-vcpkg-binary
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-cache-ubuntu-${{ hashFiles('src/vcpkg.json', '.git/modules/vcpkg/HEAD') }}
          # Allows to restore a cache when deps have only partially changed (like adding a dependency)
          restore-keys: vcpkg-cache-ubuntu-

      - name: Config OR-Tools URL
        run: |
            echo "ORTOOLS_URL=https://github.com/rte-france/or-tools/releases/download/$(cat ortools_tag)/ortools_cxx_ubuntu-20.04_static_sirius.zip" >> $GITHUB_ENV

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sonarcloud-${{ env.SONAR_SCANNER_VERSION }}

      - name: Install libraries
        run: |
          sudo apt-get update
          sudo apt-get install uuid-dev libwxgtk3.0-gtk3-dev
          sudo apt-get install libboost-test-dev
          sudo apt-get install g++-10 gcc-10

      - name: Download pre-compiled librairies
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          os: ${{matrix.os}}
          buildtype: Debug
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install gcovr
        run: sudo pip install gcovr==5.0 #5.1 generate issues with sonarcloud report parsing

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r src/tests/examples/requirements.txt

      - name: Read simtest version
        run: |
          echo 'SIMTEST_JSON<<EOF' >> $GITHUB_ENV
          cat ./simtest.json >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Export simtest version
        run: |
          echo "SIMTEST=${{ fromJson(env.SIMTEST_JSON).version }}" >> $GITHUB_ENV

      - name: Init submodule
        run: |
          git submodule update --init --remote src/tests/resources/Antares_Simulator_Tests

      - name: Configure
        run: |
          cmake -B _build -S src \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_C_COMPILER=/usr/bin/gcc-10 \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=x64-linux-release \
          -DCODE_COVERAGE=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_PREFIX_PATH="../install;${{ env.ORTOOLS_DIR }}/install" \
          -DBUILD_TESTING=ON \
          -DMZ_CODE_COVERAGE=ON \
          -DPython3_EXECUTABLE='${{ steps.setup-python.outputs.python-path }}'

      - name: Build
        run: |
          build-wrapper-linux-x86-64 --out-dir $GITHUB_WORKSPACE/_build/output cmake --build _build --config release -j$(nproc)

      - name: Test and generate coverage
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE/_build
          ctest -C Release --output-on-failure -L "unit"

      - name: Run short-tests
        if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
        uses: ./.github/workflows/run-tests
        with:
          simtest-tag: ${{ env.SIMTEST }}
          batch-name: short-tests
          os: ${{ matrix.os }}

      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube --output coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"

      - name: Cache vcpkg binary dir
        if: always()
        id: save-cache-vcpkg-binary
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-cache-ubuntu-${{ hashFiles('src/vcpkg.json', '.git/modules/vcpkg/HEAD') }}
