name: SonarCloud

on:
    pull_request:

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]

    env:
      SONAR_SERVER_URL: "https://sonarcloud.io"
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      vcpkgPackages: yaml-cpp antlr4 boost-test minizip-ng[core,zlib]
      triplet: x64-linux
      WX_CONFIG: /usr/bin/wx-config

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Config OR-Tools URL
        run: |
            echo "ORTOOLS_URL=https://github.com/rte-france/or-tools/releases/download/$(cat ortools_tag)/ortools_cxx_ubuntu-20.04_static_sirius.zip" >> $GITHUB_ENV

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v2

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sonarcloud-${{ env.SONAR_SCANNER_VERSION }}


      - name : Init VCPKG submodule
        run: |
            git submodule update --init vcpkg

      # Restore both vcpkg and its artifacts from the GitHub cache service.
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v4
        with:
          # The first path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg_manifest/vcpkg.json' ) }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ env.triplet }}

      - name: Install libraries
        run: |
          sudo apt-get update
          sudo apt-get install uuid-dev libwxgtk3.0-gtk3-dev
          sudo apt-get install libboost-test-dev
          sudo apt-get install g++-10 gcc-10

      - name: export wxWidgets script
        shell: bash
        run: |
            export WX_CONFIG=${{env.WX_CONFIG}}

      - name : Install deps with VCPKG
        run: |
            cd vcpkg
            ./bootstrap-vcpkg.sh
            vcpkg install ${{env.vcpkgPackages}} --triplet ${{env.triplet}}
            rm -rf buildtrees packages downloads
        shell: bash

      - name: Read antares-deps version
        id: antares-deps-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'antares-deps-version.json'
          prop_path: 'antares_deps_version'

      - name: Download pre-compiled librairies
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
          os: ${{matrix.os}}
          buildtype: Debug
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install gcovr
        run: sudo pip install gcovr==5.0 #5.1 generate issues with sonarcloud report parsing

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install -r src/tests/examples/requirements.txt

      - name: Init submodule
        run: |
          git submodule update --init src/antares-deps
          git submodule update --init --remote src/tests/resources/Antares_Simulator_Tests

      - name: Configure
        run: |
          cmake -B _build -S src \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DVCPKG_ROOT="${{env.VCPKG_ROOT}}" \
          -DVCPKG_TARGET_TRIPLET=${{ env.triplet }} \
          -DCMAKE_C_COMPILER=/usr/bin/gcc-10 \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
          -DDEPS_INSTALL_DIR=./rte-antares-deps-Debug \
          -DCODE_COVERAGE=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_PREFIX_PATH="../install;${{ env.ORTOOLS_DIR }}/install" \
          -DBUILD_TESTING=ON \
          -DMZ_CODE_COVERAGE=ON \
          -DBUILD_not_system=OFF \
          -DPython3_EXECUTABLE='${{ steps.setup-python.outputs.python-path }}'

      - name: Build
        run: |
          build-wrapper-linux-x86-64 --out-dir $GITHUB_WORKSPACE/_build/output cmake --build _build --config release -j$(nproc)

      - name: Test and generate coverage
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE/_build
          ctest -C Release --output-on-failure -L "unit"

      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube --output coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
