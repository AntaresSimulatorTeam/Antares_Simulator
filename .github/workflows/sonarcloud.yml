name: SonarCloud

on:
  push:
    branches:
      - main
      - develop
      - release/*
  pull_request:

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ubuntu-20.04]

    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747 # Find the latest version in the "Linux" link on this page:
      # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      ORTOOLS_URL: "https://github.com/rte-france/or-tools/releases/download/v9.2-rte1.3/ortools_cxx_ubuntu-20.04_static_sirius.zip"

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sonarcloud-${{ env.SONAR_SCANNER_VERSION }}

      - name: Cache SonarCloud packages and analysis
        uses: actions/cache@v3
        id: sonarcloud-cache
        with:
          path: ~/.sonar
          key: ${{ runner.os }}-sonar-${{ env.SONAR_SCANNER_VERSION }}
          restore-keys: ${{ runner.os }}-sonar-${{ env.SONAR_SCANNER_VERSION }}

      - name: Download and setup sonar-scanner
        shell: bash
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        if: steps.sonarcloud-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/

      - name: Download and setup build-wrapper
        shell: bash
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        if: steps.sonarcloud-cache.outputs.cache-hit != 'true'
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/

      - name: Set build-wrapper and sonar-scanner paths
        run: |
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH


      - name: Install libraries
        run: |
             sudo apt-get update
             sudo apt-get install uuid-dev libwxgtk3.0-gtk3-dev
             sudo apt-get install libboost-test-dev

      - name: Read antares-deps version
        id: antares-deps-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'antares-deps-version.json'
          prop_path: 'antares_deps_version'

      - name: Download pre-compiled librairies
        uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
        with:
          antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
          os: ${{matrix.os}}
          ortools-url: ${{env.ORTOOLS_URL}}
          ortools-dir: ${{env.ORTOOLS_DIR}}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install gcovr
        run: sudo pip install gcovr

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip3 install -r src/tests/examples/requirements.txt

      - name: Init submodule
        run: |
             git submodule update --init --recursive src

      - name: Configure
        run: |
             cmake -B _build -S src \
             -DCMAKE_C_COMPILER_LAUNCHER=ccache \
             -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
             -DDEPS_INSTALL_DIR=./rte-antares-deps-Release \
             -DCODE_COVERAGE=ON \
             -DCMAKE_BUILD_TYPE=release \
             -DCMAKE_PREFIX_PATH="../install;${{ env.ORTOOLS_DIR }}/install" \
             -DBUILD_TESTING=ON \
             -DMZ_CODE_COVERAGE=ON \
             -DBUILD_not_system=OFF

      - name: Build
        run: |
             build-wrapper-linux-x86-64 --out-dir $GITHUB_WORKSPACE/_build/output cmake --build _build --config release -j2

      - name: Test and generate coverage
        continue-on-error: true
        run: |
          cd $GITHUB_WORKSPACE/_build
          ctest -C Release --output-on-failure -L "unit"

      - name: Collect coverage into one XML report
        run: |
          gcovr --sonarqube > coverage.xml

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
