name: Ubuntu CI (push and/or release)

on:
  push:
    branches:
      - develop
      - feature/*
      - features/*
      - fix/*
      - issue-*
      - release/*
      - doc/*
  schedule:
    - cron: '21 2 * * *'
  workflow_call:
    inputs:
      run-tests:
        required: true
        type: boolean

env:
  GITHUB_TOKEN: ${{ github.token }}
  IS_RELEASE: ${{ github.event_name == 'workflow_dispatch' }}
  RUN_SIMPLE_TESTS: ${{ github.event_name == 'push' || inputs.run-tests == 'true' }}
  RUN_EXTENDED_TESTS: ${{ github.event_name == 'schedule' || inputs.run-tests == 'true' }}

jobs:

  build:
    name: Build
    env:
      ORTOOLS_DIR: ${{ github.workspace }}/or-tools
      OS: ubuntu-20.04

    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - uses: actions/checkout@v3

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
          key: ${{ runner.name }}

    - name: Install libraries
      run: |
           sudo apt-get update
           sudo apt-get install uuid-dev libwxgtk3.0-gtk3-dev
           sudo apt-get install libboost-test-dev
           sudo apt-get install g++-10 gcc-10
           sudo apt-get install libbenchmark-dev

    - name: Read antares-deps version
      id: antares-deps-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'antares-deps-version.json'
        prop_path: 'antares_deps_version'


    - name: Config OR-Tools URL
      run: |
          echo "ORTOOLS_URL=https://github.com/rte-france/or-tools/releases/download/$(cat ortools_tag)/ortools_cxx_ubuntu-20.04_static_sirius.zip" >> $GITHUB_ENV

    - name: Download pre-compiled librairies
      uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
      with:
        antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
        os: ${{env.OS}}
        ortools-url: ${{env.ORTOOLS_URL}}
        ortools-dir: ${{env.ORTOOLS_DIR}}

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip3 install -r src/tests/examples/requirements.txt

    - name: Init submodule
      run: |
          git submodule update --init src/antares-deps
          # git submodule update --init --remote --recursive src/tests/resources/Antares_Simulator_Tests

    - name: Configure
      run: |
           cmake -B _build -S src \
           -DCMAKE_C_COMPILER_LAUNCHER=ccache \
           -DCMAKE_C_COMPILER=/usr/bin/gcc-10 \
           -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
           -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 \
           -DDEPS_INSTALL_DIR=${{github.workspace}}/rte-antares-deps-Release \
           -DCMAKE_BUILD_TYPE=release \
           -DBUILD_TESTING=ON \
           -DBUILD_not_system=OFF \
           -DBUILD_TOOLS=ON \
           -DCMAKE_PREFIX_PATH=${{ env.ORTOOLS_DIR }}/install \
           -DPython3_EXECUTABLE="${{ env.Python3_ROOT_DIR }}/bin/python" \
           -DBENCHMARK=ON

    - name: Build
      run: |
             cmake --build _build --config release -j$(nproc)


    # simtest
    - name: Read simtest version
      id: simtest-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'simtest.json'
        prop_path: 'version'


    - name: Run named mps tests
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-named-mps
        os: ${{ env.OS }}
        variant: "named-mps"
      # Download previous benchmark result from cache (if exists)
    # - name: Download previous benchmark data
    #   uses: actions/cache@v1
    #   with:
    #     path: ./cache
    #     key: ${{ runner.os }}-benchmark

    - name: Collect benchmarks
      shell: bash  
      run: echo "[ " >> _build/output.json && cat _build/benchs/*.json >> _build/output.json && echo "] " >> _build/output.json && cat _build/output.json 
    
    # Run `github-action-benchmark` action
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Python Benchmark with customSmallerIsBetter-benchmark
        tool: 'customSmallerIsBetter'
        output-file-path: _build/output.json
        # Use personal access token instead of GITHUB_TOKEN due to https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        # Show alert with commit comment on detecting possible performance regression
        alert-threshold: '200%'
        # Enable Job Summary for PRs
        #summary-always: true
        comment-on-alert: true
        # fail-on-alert: true
        #tmp remove below line
        fail-on-alert: false
        # alert-comment-cc-users: '@flomnes,@payetvin,@a-zakir'
        # skip-fetch-gh-pages: true
    


    - name: Run unfeasibility-related tests
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      run: |
           cd _build
           ctest -C Release --output-on-failure -R "^unfeasible$"

    - name: Run unit and end-to-end tests
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      run: |
           cd _build
           ctest -C Release --output-on-failure -L "unit|end-to-end"

    - name: Upload logs for failed tests
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: test-log
        path: ${{ github.workspace }}/_build/Testing/Temporary/LastTest.log

    - name: Run tests about infinity on BCs RHS
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v830
        os: ${{ env.OS }}

    - name: Run MILP with CBC
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-milp
        variant: "milp-cbc"
        os: ${{ env.OS }}

    - name: Run tests introduced in v860
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v860
        os: ${{ env.OS }}

    - name: Run tests introduced in v870
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v870
        os: ${{ env.OS }}

    - name: Run short-tests
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: short-tests
        os: ${{ env.OS }}

    - name: Run mps tests
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-mps
        os: ${{ env.OS }}

    - name: Run tests for adequacy patch (CSR)
      if: ${{ env.RUN_SIMPLE_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: adequacy-patch-CSR
        os: ${{ env.OS }}

    - name: Run parallel tests
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-parallel
        os: ${{ env.OS }}
        variant: "parallel"

    - name: Run medium-tests
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: medium-tests
        os: ${{ env.OS }}

    - name: Run long-tests-1
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-1
        os: ${{ env.OS }}

    - name: Run long-tests-2
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-2
        os: ${{ env.OS }}

    - name: Run long-tests-3
      if: ${{ env.RUN_EXTENDED_TESTS == 'true' }}
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: long-tests-3
        os: ${{ env.OS }}

    - name: Installer .deb creation
      run: |
           cd _build
           cpack -G DEB

    - name: .tar.gz creation
      run: |
           cd _build
           cpack -G TGZ

    - name: Solver archive creation
      run: |
           cd _build
           cmake --install . --prefix install
           pushd .
           cd install/bin
           tar czf ../../antares-solver_ubuntu20.04.tar.gz antares-*-solver libsirius_solver.so
           popd
           rm -rf install

    - name: Installer archive upload push
      uses: actions/upload-artifact@v3
      with:
        path: _build/*.tar.gz

    - name: Installer deb upload push
      uses: actions/upload-artifact@v3
      with:
        path: _build/*.deb
      
    
    - name: Publish assets
      if: ${{ env.IS_RELEASE == 'true' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.event.inputs.release_tag }}
      run: |
        gh release upload "$tag" _build/*.tar.gz _build/*.deb           
