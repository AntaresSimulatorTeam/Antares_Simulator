name: Release asset upload

on:
  release:
    types: [created]

env:
  GITHUB_TOKEN: ${{ github.token }}
  
jobs:

  windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest,ubuntu-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: 'ee17a685087a6886e5681e355d36cd784f0dd2c8'
            vcpkgPackages: openssl curl wxwidgets boost-test boost-process boost-filesystem boost-dll boost-regex

    steps:
    - uses: actions/checkout@v2 
    
    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.0
    
    - name : Install deps with VCPKG
      if: matrix.os == 'windows-latest'
      uses: lukka/run-vcpkg@v4
      id: runvcpkg
      with:
        vcpkgArguments: '${{ matrix.vcpkgPackages }}'
        vcpkgTriplet: '${{ matrix.triplet }}'
        vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'        
    
    - name: Install mandatory system libraries 
      if: matrix.os == 'ubuntu-latest'    
      run: |
           sudo apt-get update --fix-missing
           sudo apt-get install libuuid1 uuid-dev libssh2-1 libssh2-1-dev libidn2-0 libidn2-dev libidn11 libidn11-dev gtk2.0 libb64-dev   
           sudo apt-get install libwxgtk3.0-dev libcurl4-openssl-dev libboost-test-dev libboost-filesystem-dev libboost-dev
        
    - name: Configure with VCPKG
      if: matrix.os == 'windows-latest'
      run: |
           cmake -B _build -S src -DCMAKE_TOOLCHAIN_FILE=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_BUILD_TYPE=release
    
    - name: Configure
      if: matrix.os != 'windows-latest'
      run: |
           cmake -B _build -S src -DBUILD_DEPS=${{ matrix.build_deps }} -DCMAKE_BUILD_TYPE=release
    
    - name: Build
      run: |
           cmake --build _build --config release -j2    
           
    - name: NSIS Installer creation
      if: matrix.os == 'windows-latest'
      run: |
           cd _build
           cpack -GNSIS  
           $NSIS_NAME=dir *.exe
           $NSIS_NAME=Split-Path $NSIS_NAME -Leaf
           echo "::set-env name=NSIS_NAME::$NSIS_NAME" 
        
    - name: Installer .deb creation
      if: matrix.os == 'ubuntu-latest'
      run: |
           cd _build
           cpack -G DEB
           export DEB_NAME=$(ls *.deb)
           echo "::set-env name=DEB_NAME::$DEB_NAME"
           
    - name: Upload .deb
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.DEB_NAME}}
        asset_name: ${{env.DEB_NAME}}
        asset_content_type: application/octet-stream
        
    - name: Upload NSIS installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1.0.2
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: _build/${{env.NSIS_NAME}}
        asset_name: ${{env.NSIS_NAME}}
        asset_content_type: application/octet-stream
    
