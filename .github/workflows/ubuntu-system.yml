name: Ubuntu CI (pre-compiled)

# on:
#   push:
#     branches:
#       - develop
#       - feature/*
#       - features/*
#       - fix/*
#       - release/*
#       - doc/*
jobs:

  doc_generation:
    uses: ./.github/workflows/build-userguide.yml
    with:
      artifact_name: pdf-doc

  build:
    name: Build (XPRESS + OR-Tools=${{ matrix.ortools }})
    env:
      XPRESSDIR: ${{ github.workspace }}/xpressmp813
      ORTOOLSDIR: ${{ github.workspace }}/or-tools

    runs-on: ${{ matrix.os }}
    needs: doc_generation
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ubuntu-20.04]
        test-platform: [ubuntu-20.04]
        ortools: [ON, OFF]


    steps:
    - uses: actions/checkout@v2

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1

    - name: Install libraries
      run: |
           sudo apt-get update
           sudo apt-get install uuid-dev libwxgtk3.0-gtk3-dev
           sudo apt-get install libboost-test-dev

    # antares-deps
    - name: Read antares-deps version
      id: antares-deps-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'antares-deps-version.json'
        prop_path: 'antares_deps_version'

    - name: Download userguide
      uses: actions/download-artifact@v2
      with:
        name: pdf-doc
        path: docs/ref_guides

    - name: Download pre-compiled librairies
      uses: ./.github/workflows/download-extract-precompiled-libraries-tgz
      with:
        antares-deps-version: ${{steps.antares-deps-version.outputs.prop}}
        os: ${{matrix.os}}
        os-full-name: Ubuntu-20.04

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip3 install -r src/tests/examples/requirements.txt

    - name: Init submodule
      run: |
           git submodule update --init --recursive src

    - name: Download XPRESS if needed
      if: ${{ matrix.ortools == 'ON' }}
      run: |
        git clone -b master https://${{ secrets.XPRS_USERNAME }}:${{ secrets.XPRS_TOKEN }}@github.com/rte-france/xpress-mp ${{ env.XPRESSDIR }}

    - name: Download OR-Tools if needed
      if: ${{ matrix.ortools == 'ON' }}
      id: ortools
      run: |
          if [ "${{ matrix.ortools }}" == "ON" ]; then
            mkdir -p ${{ env.ORTOOLSDIR }} && cd ${{ env.ORTOOLSDIR }}
            wget -q -O ortools.zip https://github.com/rte-france/or-tools/releases/download/v9.2-rte1.3/ortools_cxx_ubuntu-20.04_shared_xprs.zip
            unzip -q ortools.zip
            rm ortools.zip

            echo "::set-output name=flags::-DCMAKE_PREFIX_PATH=${{ env.ORTOOLSDIR }}/install -DXPRESS_ROOT=${{ env.XPRESSDIR }}"
            echo "::set-output name=label::-ortools-xpress"
          else
            echo "::set-output name=flags::"
            echo "::set-output name=label::"
          fi

    - name: Configure
      run: |
           cmake -B _build -S src -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DDEPS_INSTALL_DIR=./rte-antares-deps-Release -DCMAKE_PREFIX_PATH=../install -DCMAKE_BUILD_TYPE=release -DBUILD_TESTING=ON -DBUILD_OUTPUT_TEST=ON -DBUILD_not_system=OFF ${{ steps.ortools.outputs.flags }}

    - name: Build
      run: |
           cmake --build _build --config release -j2

    - name: Run unfeasibility-related tests
      run: |
           cd _build
           ctest -C Release --output-on-failure -R unfeasible

    - name: Run adq-patch related tests
      run: |
           cd _build
           ctest -C Release --output-on-failure -R test-adq-patch

    - name: Run unit and end-to-end tests
      run: |
           cd _build
           ctest -C ${{ matrix.buildtype }} --output-on-failure -L "unit|end-to-end" -LE ortools

    # simtest
    - name: Read simtest version
      id: simtest-version
      uses: notiz-dev/github-action-json-property@release
      with:
        path: 'simtest.json'
        prop_path: 'version'

    - name: Run tests about infinity on BCs RHS
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: valid-v830
        os: ${{ matrix.test-platform }}

    - name: Run short-tests
      uses: ./.github/workflows/run-tests
      with:
        simtest-tag: ${{steps.simtest-version.outputs.prop}}
        batch-name: short-tests
        os: ${{ matrix.test-platform }}

    - name: Installer .deb creation
      run: |
           cd _build
           cpack -G DEB

    - name: Installer .tar.gz creation
      run: |
           cd _build
           cpack -G TGZ

    - name: Installer archive upload
      uses: actions/upload-artifact@v2
      with:
        name: antares-ubuntu-archive${{ steps.ortools.outputs.label }}
        path: _build/*.tar.gz

    - name: Installer deb upload
      uses: actions/upload-artifact@v2
      with:
        name: antares-ubuntu-deb${{ steps.ortools.outputs.label }}
        path: _build/*.deb

